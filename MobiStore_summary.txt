File: ./app/src/androidTest/java/cl/mobistore/ExampleInstrumentedTest.kt

package cl.mobistore

import androidx.test.platform.app.InstrumentationRegistry
import androidx.test.ext.junit.runners.AndroidJUnit4

import org.junit.Test
import org.junit.runner.RunWith

import org.junit.Assert.*

/**
 * Instrumented test, which will execute on an Android device.
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
@RunWith(AndroidJUnit4::class)
class ExampleInstrumentedTest {
    @Test
    fun useAppContext() {
        // Context of the app under test.
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        assertEquals("cl.mobistore", appContext.packageName)
    }
}

File: ./app/src/test/java/cl/mobistore/ExampleUnitTest.kt

package cl.mobistore

import org.junit.Test

import org.junit.Assert.*

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
class ExampleUnitTest {
    @Test
    fun addition_isCorrect() {
        assertEquals(4, 2 + 2)
    }
}

File: ./app/src/main/java/cl/mobistore/MyAplication.kt

package cl.mobistore

import android.app.Application
import dagger.hilt.android.HiltAndroidApp

@HiltAndroidApp
class MyApplication: Application() {
}

File: ./app/src/main/java/cl/mobistore/MainActivity.kt

package cl.mobistore

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.viewModels
import cl.mobistore.navigation.NavManager
import cl.mobistore.ui.theme.MobiStoreTheme
import cl.mobistore.viewmodel.PhoneViewModel
import dagger.hilt.android.AndroidEntryPoint

@AndroidEntryPoint
class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        val viewModel: PhoneViewModel by viewModels()
        setContent {
            MobiStoreTheme {
                NavManager(viewModel)
            }
        }
    }
}


File: ./app/src/main/java/cl/mobistore/viewmodel/PhoneViewModel.kt

package cl.mobistore.viewmodel

import android.util.Log
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import cl.mobistore.model.Phone
import cl.mobistore.repository.PhoneRepository
import cl.mobistore.state.PhoneState
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import javax.inject.Inject

@HiltViewModel
class PhoneViewModel @Inject constructor(
    private val repo: PhoneRepository
): ViewModel() {

    var state by mutableStateOf(PhoneState())
        private set

    val phones = repo.getAllPhonesFromDb()

    fun fetchPhonesFromAPI() {
        viewModelScope.launch {
            withContext(Dispatchers.IO) {
                repo.getAllPhonesFromAPI()
                Log.d("PHONES", repo.getAllPhonesFromAPI().toString())
            }
        }
    }

    fun getPhoneById(id: Int) {
        viewModelScope.launch {
            withContext(Dispatchers.IO) {
                try {
                    val result = repo.getPhoneById(id)
                    state = state.copy(
                        name = result.name,
                        price = result.price,
                        image = result.image,
                        description = result.description,
                        lastPrice = result.lastPrice,
                        credit = if (result.credit) "Acepta Crédito" else "Sólo Efectivo"
                    )
                } catch (e: Exception) {
                    Log.e("PhoneViewModel", "Error fetching phone details", e)
                }
            }
        }
    }

    fun clean() {
        state = state.copy(
            name = "",
            price = 0.0,
            image = "",
            description = "",
            lastPrice = 0.0,
            credit = ""
        )
    }
}


File: ./app/src/main/java/cl/mobistore/ui/theme/Color.kt

package cl.mobistore.ui.theme

import androidx.compose.ui.graphics.Color

val Purple80 = Color(0xFFD0BCFF)
val PurpleGrey80 = Color(0xFFCCC2DC)
val Pink80 = Color(0xFFEFB8C8)

val Purple40 = Color(0xFF6650a4)
val PurpleGrey40 = Color(0xFF625b71)
val Pink40 = Color(0xFF7D5260)

File: ./app/src/main/java/cl/mobistore/ui/theme/Theme.kt

package cl.mobistore.ui.theme

import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.graphics.Color

// Define los colores
val DarkBlue = Color(0xFF252243)
val BrightBlue = Color(0xFF5161F1)
val Cyan = Color(0xFF63E9F8)
val White = Color(0xFFFFFFFF)

// Esquema de colores para modo claro
private val LightColorScheme = lightColorScheme(
    primary = BrightBlue,
    secondary = Cyan,
    background = White,
    surface = White,
    onPrimary = White,
    onSecondary = DarkBlue,
    onBackground = DarkBlue,
    onSurface = DarkBlue
)

// Esquema de colores para modo oscuro
private val DarkColorScheme = darkColorScheme(
    primary = BrightBlue,
    secondary = Cyan,
    background = DarkBlue,
    surface = DarkBlue,
    onPrimary = White,
    onSecondary = DarkBlue,
    onBackground = White,
    onSurface = White
)

@Composable
fun MobiStoreTheme(
    darkTheme: Boolean = false,  // Cambia a `isSystemInDarkTheme()` para usar modo oscuro
    content: @Composable () -> Unit
) {
    val colorScheme = if (darkTheme) DarkColorScheme else LightColorScheme

    MaterialTheme(
        colorScheme = colorScheme,
        typography = Typography,
        content = content
    )
}


File: ./app/src/main/java/cl/mobistore/ui/theme/Type.kt

package cl.mobistore.ui.theme

import androidx.compose.material3.Typography
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp

// Set of Material typography styles to start with
val Typography = Typography(
    bodyLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 16.sp,
        lineHeight = 24.sp,
        letterSpacing = 0.5.sp
    )
    /* Other default text styles to override
    titleLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 22.sp,
        lineHeight = 28.sp,
        letterSpacing = 0.sp
    ),
    labelSmall = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Medium,
        fontSize = 11.sp,
        lineHeight = 16.sp,
        letterSpacing = 0.5.sp
    )
    */
)

File: ./app/src/main/java/cl/mobistore/datasource/PhoneDbDataSource.kt

package cl.mobistore.datasource

import androidx.room.Database
import androidx.room.RoomDatabase
import cl.mobistore.model.Phone
import cl.mobistore.model.PhoneDao

@Database(entities = [Phone::class], version = 1)
abstract class PhoneDbDataSource : RoomDatabase() {
    abstract fun phoneDao(): PhoneDao
}


File: ./app/src/main/java/cl/mobistore/datasource/PhoneRestDataSource.kt

package cl.mobistore.datasource

import cl.mobistore.model.Phone
import retrofit2.Response
import retrofit2.http.GET
import retrofit2.http.Path


interface PhoneRestDataSource {
    @GET("products/")
    suspend fun getPhones(): List<Phone>

    @GET("details/{id}")
    suspend fun getPhoneById(@Path("id") id: Int): Response<Phone>
}

File: ./app/src/main/java/cl/mobistore/repository/PhoneRepository.kt

package cl.mobistore.repository

import android.util.Log
import cl.mobistore.datasource.PhoneRestDataSource
import cl.mobistore.model.Phone
import cl.mobistore.model.PhoneDao
import kotlinx.coroutines.flow.Flow
import javax.inject.Inject

interface PhoneRepository {
    suspend fun getPhoneById(id: Int): Phone
    suspend fun getAllPhonesFromAPI(): List<Phone>
    fun getAllPhonesFromDb(): Flow<List<Phone>>
}

class PhoneRepositoryImp @Inject constructor(
    private val dataSource: PhoneRestDataSource,
    private val phoneDao: PhoneDao
) : PhoneRepository {

    override suspend fun getPhoneById(id: Int): Phone {
        val response = dataSource.getPhoneById(id)
        return response.body() ?: throw Exception("Phone not found")
    }

    override suspend fun getAllPhonesFromAPI(): List<Phone> {
        val phones = dataSource.getPhones()
        phones.forEach {
            phoneDao.insert(it)
        }
        return phones
    }

    override fun getAllPhonesFromDb(): Flow<List<Phone>> {
        val phones = phoneDao.getAll()
        Log.d("ROOM_FETCH", "Phones from DB: ${phones.toString()}")
        return phones
    }
}


File: ./app/src/main/java/cl/mobistore/di/DataSourceModule.kt

package cl.mobistore.di

import android.content.Context
import androidx.room.Room
import cl.mobistore.datasource.PhoneDbDataSource
import cl.mobistore.datasource.PhoneRestDataSource
import cl.mobistore.model.PhoneDao
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.qualifiers.ApplicationContext
import dagger.hilt.components.SingletonComponent
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import javax.inject.Singleton

@Module
@InstallIn(SingletonComponent::class)
class DataSourceModule {

    @Singleton
    @Provides
    fun provideRetrofit(): Retrofit {
        return Retrofit.Builder()
            .baseUrl("https://my-json-server.typicode.com/Himuravidal/FakeAPIdata/")
            .addConverterFactory(GsonConverterFactory.create())
            .build()
    }

    @Singleton
    @Provides
    fun providePhoneRestDataSource(retrofit: Retrofit): PhoneRestDataSource =
        retrofit.create(PhoneRestDataSource::class.java)

    @Singleton
    @Provides
    fun providePhoneDbDataSource(@ApplicationContext context: Context): PhoneDbDataSource {
        return Room.databaseBuilder(
            context,
            PhoneDbDataSource::class.java,
            "phone_database"
        )
            .fallbackToDestructiveMigration()
            .build()
    }

    @Singleton
    @Provides
    fun providePhoneDao(db: PhoneDbDataSource): PhoneDao = db.phoneDao()
}


File: ./app/src/main/java/cl/mobistore/di/RepositoryModule.kt

package cl.mobistore.di

import cl.mobistore.repository.PhoneRepository
import cl.mobistore.repository.PhoneRepositoryImp
import dagger.Binds
import dagger.Module
import dagger.hilt.InstallIn
import dagger.hilt.components.SingletonComponent
import javax.inject.Singleton

@Module
@InstallIn(SingletonComponent::class)
abstract class RepositoryModule {

    @Singleton
    @Binds
    abstract fun bindPhoneRepository(phoneRepositoryImp: PhoneRepositoryImp): PhoneRepository
}


File: ./app/src/main/java/cl/mobistore/util/Constants.kt

package cl.mobistore.util

class Constants {
}

File: ./app/src/main/java/cl/mobistore/navigation/NavManager.kt

package cl.mobistore.navigation

import androidx.compose.runtime.Composable
import androidx.navigation.NavType
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import androidx.navigation.navArgument
import cl.mobistore.view.PhoneDetailsView
import cl.mobistore.view.PhoneListView
import cl.mobistore.viewmodel.PhoneViewModel

@Composable
fun NavManager(viewModel: PhoneViewModel) {
    val navController = rememberNavController()
    NavHost(navController, startDestination = "PhoneListView") {
        composable("PhoneListView") {
            PhoneListView(viewModel, navController)
        }
        composable(
            "PhoneDetailsView/{id}",
            arguments = listOf(navArgument("id") { type = NavType.IntType })
        ) {
            val id = it.arguments?.getInt("id") ?: 0
            PhoneDetailsView(viewModel, id)
        }
    }
}


File: ./app/src/main/java/cl/mobistore/state/PhoneState.kt

package cl.mobistore.state

data class PhoneState(
    val name: String = "",
    val price: Double = 0.0,
    val image: String = "",
    val description: String = "",  // Nueva propiedad para la descripción
    val lastPrice: Double = 0.0,  // Nueva propiedad para el último precio
    val credit: String = ""  // Nueva propiedad para "Acepta Crédito" o "Sólo Efectivo"
)


File: ./app/src/main/java/cl/mobistore/components/TopBarComponent.kt

package cl.mobistore.components

class TopBarComponent {
}

File: ./app/src/main/java/cl/mobistore/components/PhoneCard.kt

package cl.mobistore.components

import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Card
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import cl.mobistore.model.Phone
import coil.compose.rememberImagePainter

import androidx.compose.material3.CardDefaults

@Composable
fun PhoneCard(phone: Phone, onClick: () -> Unit) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .clickable { onClick() }
            .padding(8.dp),
        shape = RoundedCornerShape(16.dp),
        elevation = CardDefaults.cardElevation(8.dp),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surface,
            contentColor = MaterialTheme.colorScheme.onSurface
        )
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            // Imagen del teléfono
            Image(
                painter = rememberImagePainter(phone.image),
                contentDescription = phone.name,
                contentScale = ContentScale.Crop,
                modifier = Modifier
                    .size(100.dp)
                    .padding(end = 16.dp)
                    .aspectRatio(1f)
            )

            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(start = 8.dp)
            ) {
                // Nombre del teléfono
                Text(
                    text = phone.name,
                    style = MaterialTheme.typography.titleMedium,
                    color = MaterialTheme.colorScheme.onSurface,
                    fontSize = 18.sp
                )

                // Precio del teléfono
                Text(
                    text = "${phone.price} CLP",
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.secondary,
                    fontSize = 16.sp,
                    modifier = Modifier.padding(top = 8.dp)
                )
            }
        }
    }
}


File: ./app/src/main/java/cl/mobistore/model/PhoneDao.kt

package cl.mobistore.model

import androidx.room.Dao
import androidx.room.Insert
import androidx.room.OnConflictStrategy
import androidx.room.Query
import kotlinx.coroutines.flow.Flow

@Dao
interface PhoneDao {
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    fun insert(phone: Phone)

    @Query("SELECT * FROM phone ORDER BY id")
    fun getAll(): Flow<List<Phone>>
}

File: ./app/src/main/java/cl/mobistore/model/Phone.kt

package cl.mobistore.model

import androidx.room.ColumnInfo
import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "phone")
data class Phone(
    @PrimaryKey(autoGenerate = true) val id: Int,
    @ColumnInfo(name = "name") val name: String,
    @ColumnInfo(name = "price") val price: Double,
    @ColumnInfo(name = "image") val image: String,
    @ColumnInfo(name = "description") val description: String = "",  // Nueva columna para la descripción
    @ColumnInfo(name = "lastPrice") val lastPrice: Double = 0.0,  // Nueva columna para el último precio
    @ColumnInfo(name = "credit") val credit: Boolean = false  // Nueva columna para aceptar crédito
)


File: ./app/src/main/java/cl/mobistore/view/PhoneDetailsView.kt

package cl.mobistore.view

import android.content.Intent
import android.net.Uri
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import cl.mobistore.viewmodel.PhoneViewModel

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun PhoneDetailsView(viewModel: PhoneViewModel, id: Int) {
    // Recupera los detalles del teléfono
    val phoneState = viewModel.state

    LaunchedEffect(Unit) {
        viewModel.getPhoneById(id)
    }

    val context = LocalContext.current

    Scaffold(
        floatingActionButton = {
            FloatingActionButton(onClick = {
                // Intento para enviar un correo
                val intent = Intent(Intent.ACTION_SENDTO).apply {
                    data = Uri.parse("mailto:info@novaera.cl")
                    putExtra(Intent.EXTRA_SUBJECT, "Consulta ${phoneState.name} - Id: $id")
                    putExtra(Intent.EXTRA_TEXT, "Hola, me gustaría obtener más información del móvil ${phoneState.name} de código $id. Quedo atento.")
                }
                context.startActivity(intent)
            }) {
                Text("Correo")
            }
        }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
                .padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp),
            horizontalAlignment = Alignment.Start
        ) {
            // Detalles del teléfono
            Text(text = phoneState.name, style = MaterialTheme.typography.titleLarge)
            Text(text = "Precio: ${phoneState.price} CLP", style = MaterialTheme.typography.bodyMedium)
            Text(text = "Precio anterior: ${phoneState.lastPrice} CLP", style = MaterialTheme.typography.bodyMedium)
            Text(text = "Descripción: ${phoneState.description}", style = MaterialTheme.typography.bodyMedium)
            Text(text = "Forma de pago: ${phoneState.credit}", style = MaterialTheme.typography.bodyMedium)
        }
    }
}


File: ./app/src/main/java/cl/mobistore/view/PhoneListView.kt

package cl.mobistore.view

import android.util.Log
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.*
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import cl.mobistore.components.PhoneCard
import cl.mobistore.viewmodel.PhoneViewModel

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun PhoneListView(viewModel: PhoneViewModel, navController: NavController) {
    val phones by viewModel.phones.collectAsState(initial = listOf())

    LaunchedEffect(Unit) { viewModel.fetchPhonesFromAPI() }

    // Imprimir el contenido de phones en el Logcat
    Log.d("PhoneListView", phones.toString())

    Scaffold(
            topBar = {
                TopAppBar(
                        title = {
                            Text(
                                    text = "Phone Catalog",
                                    style = MaterialTheme.typography.titleLarge
                            )
                        },
                        colors =
                                TopAppBarDefaults.topAppBarColors(
                                        containerColor = MaterialTheme.colorScheme.primary,
                                        titleContentColor = MaterialTheme.colorScheme.onPrimary
                                )
                )
            }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
                .background(MaterialTheme.colorScheme.background)
        ) {
            LazyColumn(
                contentPadding = PaddingValues(16.dp),
                verticalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                items(phones) { phone ->
                    PhoneCard(phone) {
                        navController.navigate("PhoneDetailsView/${phone.id}")
                    }
                }
            }
        }
    }
}


